services:
  root:
    image: node:20.18-slim
    environment:
      - HOME=/tmp
    volumes:
      - .:/app
      - .npmrc:/tmp/.npmrc
    working_dir: /app
    user: "${UID-1000}:${GID-1000}"
    command:
      - sh
      - -c
      - |
        npm install
        for i in $$(ls -1 packages); do
          if [ -r "packages/$$i/package.json" ]; then
            npm install --prefix "packages/$$i"
          fi
        done
        SHELL=sh npm run serve

  database:
    image: postgres:16.1
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-postgres}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./packages/database/docker-entrypoint-initdb:/docker-entrypoint-initdb.d/
    ports:
      - ${DATABASE_PORT:-5432}:5432

  backend:
    image: node:20.18-slim
    environment:
      - HOME=/tmp
      - NODE_ENV=development
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_URL=${BACKEND_URL}
      - APP_PORT=${BACKEND_PORT}
      - DISABLE_TELEGRAM=${DISABLE_TELEGRAM}
      - ROUTE_PREFIX=${BACKEND_PREFIX}
      - CDN_URL=${CDN_URL}
    volumes:
      - .:/app
    working_dir: /app
    user: "${UID:-1000}:${GID:-1000}"
    ports:
      - ${BACKEND_DEBUG_PORT:-9229}:9229
      - ${BACKEND_PORT:-3000}:${BACKEND_PORT:-3000}
    command:
      - sh
      - -c
      - |
        npm run wait
        npm run start:backend:nodemon

  frontend:
    image: node:20.18-slim
    environment:
      - HOME=/tmp
      - EXPO_PUBLIC_BACKEND_URL=${BACKEND_URL}
      - EXPO_PUBLIC_TELEGRAM_BOT_NAME=${TELEGRAM_BOT_NAME}
      - EXPO_PUBLIC_CDN_URL=${CDN_URL}
      - FRONTEND_PORT=${FRONTEND_PORT:-4000}
      - NODE_ENV=development
    volumes:
      - .:/app
    working_dir: /app
    user: "${UID:-1000}:${GID:-1000}"
    ports:
      - ${FRONTEND_PORT:-4000}:${FRONTEND_PORT:-4000}
    command:
      - sh
      - -c
      - |
        npm run wait
        npx concurrently --kill-others-on-fail "npm:start:frontend:${PLATFORM:-dev}"

  # pg-admin:
  #   image: dpage/pgadmin4
  #   ports:
  #     - ${PGADMIN_PORT:-5050}:80
  #   env_file:
  #     - '.env'
  #   depends_on:
  #     - database
    
  # webdav:
  #   image: jtilander/webdav
  #   container_name: webdav
  #   depends_on:
  #     - backend
  #   env_file:
  #     - '.env'
  #   volumes:
  #     - ./packages/webdav/data:/data


volumes:
  db_data:
