#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ GitHub Actions
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/pipeline-monitor.sh [owner] [repo] [workflow_id]

set -e

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
OWNER=${1:-"paulislava"}
REPO=${2:-"beznomera"}
WORKFLOW_ID=${3:-"dev.yml"}

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
say_message() {
    local message="$1"
    echo -e "${BLUE}üîä $message${NC}"
    say "$message" 2>/dev/null || echo "say command not available"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ workflow run
get_workflow_status() {
    local run_id="$1"
    local status=$(gh api repos/$OWNER/$REPO/actions/runs/$run_id --jq '.status' 2>/dev/null || echo "error")
    echo "$status"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ workflow run
get_workflow_conclusion() {
    local run_id="$1"
    local conclusion=$(gh api repos/$OWNER/$REPO/actions/runs/$run_id --jq '.conclusion' 2>/dev/null || echo "error")
    echo "$conclusion"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∂–æ–±–æ–≤
get_jobs() {
    local run_id="$1"
    local jobs=$(gh api repos/$OWNER/$REPO/actions/runs/$run_id/jobs --jq '.jobs[] | {id: .id, name: .name, status: .status, conclusion: .conclusion}' 2>/dev/null || echo "")
    echo "$jobs"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è workflow run
wait_for_workflow_run() {
    local temp_file="$1"
    local max_attempts=30
    local attempt=1
    
    echo -e "${BLUE}‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—è workflow run...${NC}"
    
    while [[ $attempt -le $max_attempts ]]; do
        local latest_run=$(gh api repos/$OWNER/$REPO/actions/workflows/$WORKFLOW_ID/runs --jq '.workflow_runs[0].id' 2>/dev/null || echo "")
        
        if [[ -n "$latest_run" && "$latest_run" != "null" ]]; then
            echo -e "${GREEN}‚úÖ Workflow run –Ω–∞–π–¥–µ–Ω: $latest_run${NC}"
            echo "$latest_run" > "$temp_file"
            return 0
        fi
        
        echo -e "${YELLOW}‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: workflow run –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω...${NC}"
        sleep 10
        ((attempt++))
    done
    
    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ workflow run –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫${NC}"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∂–æ–±
wait_for_jobs() {
    local run_id="$1"
    local temp_file="$2"
    local max_attempts=20
    local attempt=1
    
    echo -e "${BLUE}‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∂–æ–±...${NC}"
    
    while [[ $attempt -le $max_attempts ]]; do
        local jobs=$(get_jobs "$run_id")
        
        if [[ -n "$jobs" ]]; then
            echo -e "${GREEN}‚úÖ –î–∂–æ–±—ã –Ω–∞–π–¥–µ–Ω—ã${NC}"
            echo "$jobs" > "$temp_file"
            return 0
        fi
        
        echo -e "${YELLOW}‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: –¥–∂–æ–±—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã...${NC}"
        sleep 5
        ((attempt++))
    done
    
    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∂–æ–±—ã –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫${NC}"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∂–æ–±—ã
monitor_job() {
    local run_id="$1"
    local job_id="$2"
    local job_name="$3"
    
    while true; do
        local job_status=$(gh api repos/$OWNER/$REPO/actions/runs/$run_id/jobs/$job_id --jq '.status' 2>/dev/null || echo "error")
        local job_conclusion=$(gh api repos/$OWNER/$REPO/actions/runs/$run_id/jobs/$job_id --jq '.conclusion' 2>/dev/null || echo "error")
        
        if [[ "$job_status" == "error" ]]; then
            echo -e "${YELLOW}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–∂–æ–±—ã $job_name, –ø–æ–≤—Ç–æ—Ä—è–µ–º...${NC}"
            sleep 5
            continue
        fi
        
        if [[ "$job_status" == "completed" ]]; then
            if [[ "$job_conclusion" == "success" ]]; then
                echo -e "${GREEN}‚úÖ $job_name —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
                say_message "$job_name —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                break
            else
                echo -e "${RED}‚ùå $job_name –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π${NC}"
                say_message "$job_name –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π"
                break
            fi
        elif [[ "$job_status" == "in_progress" ]]; then
            echo -e "${YELLOW}‚è≥ $job_name –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...${NC}"
        elif [[ "$job_status" == "queued" ]]; then
            echo -e "${BLUE}‚è∏Ô∏è  $job_name –≤ –æ—á–µ—Ä–µ–¥–∏...${NC}"
        fi
        
        sleep 10
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor_pipeline() {
    echo -e "${BLUE}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞...${NC}"
    say_message "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∞—á–∞—Ç–æ"
    
    # –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—è workflow run
    local temp_workflow_file=$(mktemp)
    wait_for_workflow_run "$temp_workflow_file"
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ workflow run${NC}"
        say_message "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ workflow run"
        rm -f "$temp_workflow_file"
        exit 1
    fi
    
    local latest_run=$(cat "$temp_workflow_file" 2>/dev/null || echo "")
    rm -f "$temp_workflow_file"
    
    if [[ -z "$latest_run" ]]; then
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID workflow run${NC}"
        say_message "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID workflow run"
        exit 1
    fi
    
    echo -e "${BLUE}üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º workflow run: $latest_run${NC}"
    
    # –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∂–æ–±
    local temp_jobs_file=$(mktemp)
    wait_for_jobs "$latest_run" "$temp_jobs_file"
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∂–æ–±—ã${NC}"
        say_message "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∂–æ–±—ã"
        rm -f "$temp_jobs_file"
        exit 1
    fi
    
    local jobs=$(cat "$temp_jobs_file" 2>/dev/null || echo "")
    rm -f "$temp_jobs_file"
    
    if [[ -z "$jobs" ]]; then
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∂–æ–±${NC}"
        say_message "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∂–æ–±"
        exit 1
    fi
    
    # –ü–∞—Ä—Å–∏–º –¥–∂–æ–±—ã
    local job_ids=()
    local job_names=()
    
    while IFS= read -r job; do
        if [[ -n "$job" ]]; then
            local job_id=$(echo "$job" | jq -r '.id' 2>/dev/null || echo "")
            local job_name=$(echo "$job" | jq -r '.name' 2>/dev/null || echo "")
            
            if [[ -n "$job_id" && "$job_id" != "null" && -n "$job_name" ]]; then
                job_ids+=("$job_id")
                job_names+=("$job_name")
                echo -e "${BLUE}üìù –î–∂–æ–±–∞: $job_name (ID: $job_id)${NC}"
            fi
        fi
    done <<< "$jobs"
    
    if [[ ${#job_ids[@]} -eq 0 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∂–æ–±${NC}"
    else
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥–æ–π –¥–∂–æ–±—ã –≤ —Ñ–æ–Ω–µ
        local pids=()
        for i in "${!job_ids[@]}"; do
            monitor_job "$latest_run" "${job_ids[$i]}" "${job_names[$i]}" &
            pids+=($!)
        done
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å workflow –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –¥–∂–æ–±–∞–º–∏
        while true; do
            local workflow_status=$(get_workflow_status "$latest_run")
            local workflow_conclusion=$(get_workflow_conclusion "$latest_run")
            
            if [[ "$workflow_status" == "error" ]]; then
                echo -e "${YELLOW}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ workflow, –ø–æ–≤—Ç–æ—Ä—è–µ–º...${NC}"
                sleep 5
                continue
            fi
            
            if [[ "$workflow_status" == "completed" ]]; then
                if [[ "$workflow_conclusion" == "success" ]]; then
                    echo -e "${GREEN}üéâ –í–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!${NC}"
                    say_message "–í–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
                    break
                else
                    echo -e "${RED}üí• –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏${NC}"
                    say_message "–ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏"
                    break
                fi
            elif [[ "$workflow_status" == "in_progress" ]]; then
                echo -e "${YELLOW}‚è≥ –ü–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...${NC}"
            elif [[ "$workflow_status" == "queued" ]]; then
                echo -e "${BLUE}‚è∏Ô∏è  –ü–∞–π–ø–ª–∞–π–Ω –≤ –æ—á–µ—Ä–µ–¥–∏...${NC}"
            fi
            
            sleep 15
        done
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∂–æ–±
        echo -e "${BLUE}‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∂–æ–±...${NC}"
        for pid in "${pids[@]}"; do
            wait "$pid" 2>/dev/null || true
        done
    fi
    
    echo -e "${GREEN}‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω${NC}"
}


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ gh CLI
if ! command -v gh &> /dev/null; then
    echo -e "${RED}‚ùå GitHub CLI (gh) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GitHub CLI: https://cli.github.com/"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
if ! gh auth status &> /dev/null; then
    echo -e "${RED}‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ GitHub CLI${NC}"
    echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: gh auth login"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitor_pipeline 