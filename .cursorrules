# Правила для Cursor AI

## Общая информация о проекте
Это монорепозиторий с несколькими пакетами:
- `packages/backend` - NestJS API сервер
- `packages/frontend` - React Native мобильное приложение
- `packages/web` - Next.js веб-приложение
- `packages/shared` - общие типы и API клиенты
- `packages/database` - база данных
- `packages/webdav` - WebDAV сервер

## Стиль кода

### TypeScript
- Используйте строгую типизацию
- Предпочитайте интерфейсы над типами для объектов
- Используйте enum для констант
- Добавляйте JSDoc комментарии для публичных методов

### Backend (NestJS)
- Следуйте архитектуре NestJS с модулями, контроллерами и сервисами
- Используйте декораторы для валидации и авторизации
- Создавайте DTO для входящих данных
- Используйте TypeORM для работы с базой данных
- Добавляйте обработку ошибок с кастомными исключениями

### Frontend (React Native)
- Используйте функциональные компоненты с хуками
- Следуйте принципам React Native для навигации
- Используйте TypeScript для типизации пропсов и состояний
- Предпочитайте styled-components для стилизации

### Web (Next.js)
- Используйте App Router
- Следуйте принципам Server Components
- Используйте TypeScript для типизации
- Применяйте современные CSS-in-JS решения

## Структура файлов

### Backend
```
src/
├── app/
│   ├── {module}/
│   │   ├── {module}.controller.ts
│   │   ├── {module}.service.ts
│   │   ├── {module}.module.ts
│   │   ├── {module}.dto.ts
│   │   └── {module}.exceptions.ts
│   └── entities/
│       └── {entity}.entity.ts
```

### Frontend/Web
```
src/
├── components/
│   └── {Component}/
│       ├── {Component}.tsx
│       ├── {Component}.styled.ts
│       └── index.ts
├── hooks/
├── utils/
└── services/
```

## Именование

### Файлы
- Используйте kebab-case для имен файлов
- Используйте PascalCase для компонентов
- Используйте camelCase для функций и переменных

### Компоненты
- Начинайте с заглавной буквы
- Используйте PascalCase
- Добавляйте суффикс по типу: Button, FormField, CarDetails

### API
- Используйте RESTful принципы
- Группируйте эндпоинты по ресурсам
- Используйте HTTP методы правильно (GET, POST, PUT, DELETE)

## База данных

### Entity
- Используйте TypeORM декораторы
- Добавляйте индексы для часто используемых полей
- Используйте каскадные операции осторожно
- Добавляйте timestamps (createdAt, updatedAt)

### Миграции
- Создавайте миграции для изменений схемы
- Используйте семантические имена
- Тестируйте миграции на тестовых данных

## Безопасность

### Аутентификация
- Используйте JWT токены
- Храните секреты в переменных окружения
- Валидируйте входящие данные
- Используйте rate limiting

### Файлы
- Валидируйте типы файлов
- Ограничивайте размер файлов
- Используйте безопасные имена файлов

## Производительность

### Backend
- Используйте кэширование где возможно
- Оптимизируйте запросы к базе данных
- Используйте пагинацию для больших списков
- Добавляйте индексы в базу данных

### Frontend
- Используйте React.memo для оптимизации
- Применяйте lazy loading для компонентов
- Оптимизируйте изображения
- Используйте виртуализацию для больших списков

## Тестирование

### Backend
- Создавайте unit тесты для сервисов
- Добавляйте integration тесты для API
- Используйте Jest и Supertest

### Frontend
- Тестируйте компоненты с React Testing Library
- Создавайте snapshot тесты
- Тестируйте пользовательские сценарии

## Документация

### Код
- Добавляйте JSDoc для публичных методов
- Комментируйте сложную бизнес-логику
- Используйте TODO комментарии для будущих улучшений

### API
- Документируйте эндпоинты
- Описывайте параметры и ответы
- Добавляйте примеры использования

## Git
Работайте с репозиторием beznomera https://github.com/paulislava/beznomera

### Коммиты
- Используйте conventional commits
- Пишите понятные сообщения коммитов
- Группируйте связанные изменения

### Ветки
- Используйте feature ветки для новых функций
- Создавайте hotfix ветки для срочных исправлений
- Используйте semantic versioning для релизов

### Задачи
- Используйте GitHub Issues для управления задачами
- Добавляйте labels и assignees
- Используйте milestone для планирования

## Мониторинг пайплайна

### Автоматическое отслеживание
- После каждого push автоматически запускается мониторинг пайплайна
- Используется команда `say` для озвучивания статуса джобов
- Мониторинг запускается через Git hook или вручную

### Скрипты мониторинга
- `scripts/pipeline-monitor.sh` - основной скрипт мониторинга
- `scripts/monitor-pipeline.sh` - упрощенный скрипт для ручного запуска
- `.git/hooks/post-push` - Git hook для автоматического запуска

### Уведомления
- "Отслеживание пайплайна начато" - при запуске мониторинга
- "НАЗВАНИЕ_ДЖОБЫ успешно завершена" - при успешном завершении джобы
- "НАЗВАНИЕ_ДЖОБЫ завершена с ошибкой" - при ошибке в джобе
- "Весь пайплайн успешно завершен" - при успешном завершении всего пайплайна
- "Пайплайн завершен с ошибками" - при ошибках в пайплайне

### Требования
- GitHub CLI (gh) должен быть установлен и авторизован
- Команда `say` должна быть доступна для озвучивания
- Необходимы права на чтение GitHub Actions API


## Переменные окружения

### Backend
- Используйте ConfigModule из NestJS
- Валидируйте конфигурацию при запуске
- Используйте разные конфиги для разных окружений

### Frontend
- Используйте .env файлы
- Не коммитьте секреты в репозиторий
- Используйте префиксы для переменных

## Логирование

### Backend
- Используйте структурированное логирование
- Добавляйте контекст к логам
- Настройте разные уровни логирования

### Frontend
- Используйте console.log для разработки
- Добавляйте error boundaries
- Логируйте ошибки пользователей

## Монорепозиторий

### Общие пакеты
- Используйте shared пакет для общих типов
- Создавайте общие утилиты
- Дублируйте код только при необходимости

### Зависимости
- Используйте workspace для управления зависимостями
- Обновляйте зависимости регулярно
- Проверяйте уязвимости

## Docker

### Контейнеризация
- Используйте multi-stage builds
- Оптимизируйте размер образов
- Используйте .dockerignore

### Docker Compose
- Настройте development окружение
- Используйте volumes для данных
- Настройте сетевые взаимодействия

## CI/CD

### Автоматизация
- Настройте автоматические тесты
- Используйте линтеры и форматтеры
- Автоматизируйте деплой

### Качество кода
- Используйте ESLint и Prettier
- Настройте pre-commit хуки
- Проверяйте покрытие тестами

Всегда запускай код через docker-compose

Если я пишу "на сервере", то нужно подключиться через ssh admin@beznomera.net